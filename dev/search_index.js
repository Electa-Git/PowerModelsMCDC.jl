var documenterSearchIndex = {"docs":
[{"location":"man/formulations/#Network-formulations","page":"Network formulations","title":"Network formulations","text":"","category":"section"},{"location":"man/formulations/","page":"Network formulations","title":"Network formulations","text":"The optimization problems defined in PowerModelsMCDC support two network formulations:","category":"page"},{"location":"man/formulations/","page":"Network formulations","title":"Network formulations","text":"PowerModels.ACPPowerModel;\nPowerModels.DCPPowerModel.","category":"page"},{"location":"man/formulations/","page":"Network formulations","title":"Network formulations","text":"For an overview of the type hierarchy and details on how each formulation is defined over AC networks, refer to PowerModels' “Network Formulations” documentation.","category":"page"},{"location":"man/formulations/","page":"Network formulations","title":"Network formulations","text":"These formulations are extended in PowerModelsMCDC to include a multi-conductor model for DC networks, as detailed below.","category":"page"},{"location":"man/formulations/#ACPPowerModel","page":"Network formulations","title":"ACPPowerModel","text":"","category":"section"},{"location":"man/formulations/","page":"Network formulations","title":"Network formulations","text":"Class: NLP.","category":"page"},{"location":"man/formulations/","page":"Network formulations","title":"Network formulations","text":"Variables: bus terminal voltage, branch conductor current.","category":"page"},{"location":"man/formulations/","page":"Network formulations","title":"Network formulations","text":"Current flows in meshed DC networks follow Ohm's law, i.e., considering the resistance of the DC branch conductors, and the DC branch conductors are lossy, according to Ohm's law.","category":"page"},{"location":"man/formulations/","page":"Network formulations","title":"Network formulations","text":"Converters have parametric losses.","category":"page"},{"location":"man/formulations/#DCPPowerModel","page":"Network formulations","title":"DCPPowerModel","text":"","category":"section"},{"location":"man/formulations/","page":"Network formulations","title":"Network formulations","text":"Class: LP.","category":"page"},{"location":"man/formulations/","page":"Network formulations","title":"Network formulations","text":"Variables: bus terminal voltage, branch conductor current.","category":"page"},{"location":"man/formulations/","page":"Network formulations","title":"Network formulations","text":"Current flows in a meshed DC network follow Ohm's law, i.e., considering the resistance of branch conductors, but the DC branch conductors are lossless.","category":"page"},{"location":"man/formulations/","page":"Network formulations","title":"Network formulations","text":"All DC voltages are defined up to a constant term. Therefore, the only meaningful use of the voltage values provided in results is to compute voltage drops over DC branch conductors.","category":"page"},{"location":"man/formulations/","page":"Network formulations","title":"Network formulations","text":"Converters have parametric losses (constant and linear terms only).","category":"page"},{"location":"man/network-data/#Network-data-format","page":"Network data format","title":"Network data format","text":"","category":"section"},{"location":"man/network-data/","page":"Network data format","title":"Network data format","text":"CurrentModule = PowerModelsMCDC\n\n# In this documentation, we use LaTeX newlines (i.e., ``\\\\``) to achieve line breaks in\n# table cells.\n# It is a clumsy trick, and what is worse, it inserts tons of boilerplate code in the HTML,\n# instead of just a <br /> tag. As an alternative, tables could be directly coded in HTML.","category":"page"},{"location":"man/network-data/#The-network-data-dictionary","page":"Network data format","title":"The network data dictionary","text":"","category":"section"},{"location":"man/network-data/","page":"Network data format","title":"Network data format","text":"Since PowerModelsMCDC extends the PowerModelsACDC data format, most of the parameters have the same meaning as in PowerModelsACDC. The remaining parameters are described below.","category":"page"},{"location":"man/network-data/#Converter-(convdc)","page":"Network data format","title":"Converter (convdc)","text":"","category":"section"},{"location":"man/network-data/","page":"Network data format","title":"Network data format","text":"Field Values Data U.M. Description\nconv_confi {1,2}  Configuration:1: monopolar (symmetric or asymmetric)2: bipolar\nconnect_at {0,1,2}  Bus terminals where the converter is connected (only used if the converter is monopolar):0: positive and negative1: positive and neutral2: negative and neutral\nground_type {0,1}  Neutral terminal grounding type:0: ungrounded neutral terminal1: grounded neutral terminal\nground_z [0,+∞) p.u. Grounding impedance (only used if ground_type == 1)","category":"page"},{"location":"man/network-data/#DC-branch-(branchdc)","page":"Network data format","title":"DC branch (branchdc)","text":"","category":"section"},{"location":"man/network-data/","page":"Network data format","title":"Network data format","text":"Field Values Data U.M. Description\nline_confi {1,2}  Configuration:1: monopolar (symmetric or asymmetric)2: bipolar\nconnect_at {0,1,2}  Bus terminals where the branch is connected (only used if the DC branch is monopolar):0: positive and negative1: positive and neutral2: negative and neutral\nreturn_type   Not used in package code, but present in input files.Originally meant for modeling ground return (1) instead of metallic return (2).\nreturn_z (0,+∞) p.u. Metallic return impedance","category":"page"},{"location":"man/network-data/#Working-with-Matpower-files","page":"Network data format","title":"Working with Matpower files","text":"","category":"section"},{"location":"man/network-data/","page":"Network data format","title":"Network data format","text":"Input data can be provided in the form of a file structured similarly to the format defined by Matpower. An example .m file is available to illustrate the syntax. You can provide such a file to PowerModelsMCDC by using the parse_file function.","category":"page"},{"location":"man/specifications/#Problem-specifications","page":"Problem specifications","title":"Problem specifications","text":"","category":"section"},{"location":"man/specifications/","page":"Problem specifications","title":"Problem specifications","text":"Currently, PowerModelsMCDC only supports the OPF problem.","category":"page"},{"location":"man/specifications/#OPF","page":"Problem specifications","title":"OPF","text":"","category":"section"},{"location":"man/specifications/","page":"Problem specifications","title":"Problem specifications","text":"The Optimal Power Flow (OPF) problem over a hybrid AC/DC network.","category":"page"},{"location":"man/specifications/","page":"Problem specifications","title":"Problem specifications","text":"It uses a single-phase representation for the AC part, and a multi-conductor model for the DC part.","category":"page"},{"location":"man/specifications/","page":"Problem specifications","title":"Problem specifications","text":"To build and solve such a problem, use the solve_mcdcopf function.","category":"page"},{"location":"#PowerModelsMCDC.jl-documentation","page":"Home","title":"PowerModelsMCDC.jl documentation","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PowerModelsMCDC.jl is a Julia package for the steady-state optimization of hybrid AC/DC power networks, with a focus on multiconductor modeling of DC networks.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package builds upon PowerModels.jl, which is used for modeling the AC system, and is similar to PowerModelsACDC.jl, which features a single-conductor model of DC networks.","category":"page"},{"location":"","page":"Home","title":"Home","text":"PowerModelsMCDC.jl is particularly suitable for representing unbalanced HVDC networks:","category":"page"},{"location":"","page":"Home","title":"Home","text":"DC buses are modeled using 3 terminals: positive, negative, and neutral.\nEach conductor of a DC branch is individually modeled, including the metallic return conductor.\nBoth monopolar and bipolar converter stations are considered; in the latter case, the two poles are modeled separately.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"From Julia, PowerModelsMCDC can be installed using the built-in package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"PowerModelsMCDC\")","category":"page"},{"location":"#Citing-PowerModelsMCDC.jl","page":"Home","title":"Citing PowerModelsMCDC.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you find PowerModelsMCDC.jl useful in your work, we kindly request that you cite the following preprint:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@misc{PowerModelsMCDC,\n    doi = {10.48550/ARXIV.2211.06283},\n    url = {https://arxiv.org/abs/2211.06283},\n    author = {Jat, Chandra Kant and Dave, Jay and Van Hertem, Dirk and Ergun, Hakan},\n    title = {Unbalanced OPF Modelling for Mixed Monopolar and Bipolar HVDC Grid Configurations},\n    publisher = {arXiv},\n    year = {2022},\n    copyright = {Creative Commons Attribution 4.0 International}\n}","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This code is provided under a BSD 3-Clause License.","category":"page"},{"location":"api/functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"api/functions/","page":"Functions","title":"Functions","text":"CurrentModule = PowerModelsMCDC","category":"page"},{"location":"api/functions/#Index","page":"Functions","title":"Index","text":"","category":"section"},{"location":"api/functions/","page":"Functions","title":"Functions","text":"","category":"page"},{"location":"api/functions/#Working-with-input-data","page":"Functions","title":"Working with input data","text":"","category":"section"},{"location":"api/functions/","page":"Functions","title":"Functions","text":"parse_file","category":"page"},{"location":"api/functions/#PowerModelsMCDC.parse_file","page":"Functions","title":"PowerModelsMCDC.parse_file","text":"parse_file(file; <keyword arguments>)\n\nParse a Matpower .m file into a PowerModelsMCDC data structure.\n\nKeyword arguments, if any, are forwarded to PowerModels.parse_file.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#Problem-specifications","page":"Functions","title":"Problem specifications","text":"","category":"section"},{"location":"api/functions/","page":"Functions","title":"Functions","text":"solve_mcdcopf\nbuild_mcdcopf","category":"page"},{"location":"api/functions/#PowerModelsMCDC.solve_mcdcopf","page":"Functions","title":"PowerModelsMCDC.solve_mcdcopf","text":"solve_mcdcopf(file, model_type, optimizer; <keyword arguments>)\nsolve_mcdcopf(data, model_type, optimizer; <keyword arguments>)\n\nBuild and solve the OPF problem over a hybrid AC/DC network, using a multi-conductor model for the DC part.\n\nInput can be a Matpower file or a data dictionary. The OPF problem being built is the one defined in build_mcdcopf. Keyword arguments, if any, are forwarded to PowerModels.solve_model.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#PowerModelsMCDC.build_mcdcopf","page":"Functions","title":"PowerModelsMCDC.build_mcdcopf","text":"build_mcdcopf(pm::PowerModels.AbstractPowerModel)\n\nBuild the OPF problem over a hybrid AC/DC network, using a multi-conductor model for the DC part.\n\nThe objective is the minimization of generation cost.\n\n\n\n\n\n","category":"function"}]
}
